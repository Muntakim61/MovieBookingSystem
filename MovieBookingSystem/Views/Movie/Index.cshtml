@{
    ViewData["Title"] = "Movies";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Movies</h2>

<div class="d-flex justify-content-between mb-3">
    <a asp-action="Create" class="btn btn-primary">Create New Movie</a>
    <a class="btn btn-success" href="/Movie/DownloadExcel">Download Movie list (Excel)</a>
</div>

<!-- Tabulator CSS and JS -->
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator.min.css" rel="stylesheet" />
<script src="https://unpkg.com/tabulator-tables@5.4.3/dist/js/tabulator.min.js"></script>

<div id="movie-table"></div>

<script>
    var table = new Tabulator("#movie-table", {
        height: 500,
        layout: "fitColumns",
        ajaxURL: "/Movie/GetMovies",
        ajaxConfig: "GET",
        pagination: "remote",
        paginationSize: 10,
        ajaxResponse: function (url, params, response) {
            return response.data;
        },
        paginationDataReceived: {
            last_page: "last_page",
            data: "data"
        },
            columns: [
        { title: "ID", field: "movieId", visible: false },
        { title: "Title", field: "title", editor: "input", sorter: "string", headerFilter: "input" },
        { title: "Genre", field: "genre", editor: "input", sorter: "string", headerFilter: "input" },
        { title: "Release Date", field: "releaseDate", editor: "input", sorter: "date", headerFilter: "input" },
        { title: "Duration (min)", field: "duration", editor: "number", sorter: "number", headerFilter: "input" },
        { title: "Price", field: "price", editor: "number", sorter: "number", headerFilter: "input" },
        { title: "Director", field: "directorName", sorter: "string", headerFilter: "input" },
        {
            title: "Image",
            field: "imageUrl",
            formatter: function(cell) {
                const url = cell.getValue();
                return `<img src="${url}" alt="Movie Image" style="height: 60px; border-radius: 5px;" />`;
            }
        },
        {
            title: "Actions",
            formatter: function(cell) {
                const data = cell.getRow().getData();
                return `
                    <button class="btn btn-sm btn-warning me-1 action-edit" data-id="${data.movieId}">Edit</button>
                    <button class="btn btn-sm btn-danger action-delete" data-id="${data.movieId}">Delete</button>
                `;
            },
            width: 180,
            hozAlign: "center",
            headerSort: false 
        }
    ]

    });

    
    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('action-edit')) {
            const id = e.target.getAttribute('data-id');
            window.location.href = '/Movie/Edit/' + id;
        } else if (e.target.classList.contains('action-delete')) {
            const id = e.target.getAttribute('data-id');
            if (confirm("Are you sure you want to delete this movie?")) {
                fetch("/Movie/DeleteMovie", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(id)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        table.replaceData(); 
                    } else {
                        alert("Failed to delete movie.");
                    }
                });
            }
        }
    });

    
    table.on("cellEdited", function (cell) {
        let rowData = cell.getRow().getData();
        fetch("/Movie/SaveMovie", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(rowData)
        });
    });
</script>
